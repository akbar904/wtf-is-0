
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:animal_app/models/animal_model.dart';

void main() {
	group('Animal Model', () {
		test('Animal model should be correctly instantiated', () {
			final animal = Animal(name: 'Cat', icon: Icons.access_time);

			expect(animal.name, 'Cat');
			expect(animal.icon, Icons.access_time);
		});

		test('Animal model should support serialization and deserialization', () {
			final animal = Animal(name: 'Dog', icon: Icons.person);
			final animalJson = {
				'name': 'Dog',
				'icon': Icons.person.codePoint, // Assuming serialization to codePoint for simplicity
			};

			// Test toJson
			final animalToJson = {
				'name': animal.name,
				'icon': animal.icon.codePoint,
			};
			expect(animalToJson, animalJson);

			// Test fromJson
			final animalFromJson = Animal(
				name: animalJson['name'],
				icon: IconData(animalJson['icon'], fontFamily: 'MaterialIcons'),
			);
			expect(animalFromJson.name, animal.name);
			expect(animalFromJson.icon, animal.icon);
		});
	});
}
