
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mocktail/mocktail.dart';
import 'package:bloc_test/bloc_test.dart';
import 'package:animal_app/widgets/animal_widget.dart';

class MockAnimal extends Mock implements Animal {}

void main() {
	group('AnimalWidget', () {
		testWidgets('displays Cat with clock icon', (WidgetTester tester) async {
			// Arrange
			final animal = Animal(name: 'Cat', icon: Icons.access_time);
			await tester.pumpWidget(MaterialApp(home: AnimalWidget(animal: animal)));

			// Assert
			expect(find.text('Cat'), findsOneWidget);
			expect(find.byIcon(Icons.access_time), findsOneWidget);
		});

		testWidgets('displays Dog with person icon', (WidgetTester tester) async {
			// Arrange
			final animal = Animal(name: 'Dog', icon: Icons.person);
			await tester.pumpWidget(MaterialApp(home: AnimalWidget(animal: animal)));

			// Assert
			expect(find.text('Dog'), findsOneWidget);
			expect(find.byIcon(Icons.person), findsOneWidget);
		});
	});
}
